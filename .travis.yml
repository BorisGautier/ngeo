sudo: false

language: node_js

env:
  global:
  - CXX=g++-4.8
  - secure: "l/McmiK4djffT04/+5MxW9sy4yO80Rf6vq+nZb5P647A6pXpPLdoRLGo50CtYRiKnFLiChHk2QxUOspeKuIKE+UQAm9dGmyMgfYkj/jwxIBd0YQqavaGzoWo5U1ZSGKeVd3kJlIaUJyLlnKbBOmFCY00c4JLveAagsV53lbephY="

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
    - python-virtualenv

matrix:
  include:
  - node_js: "4"
    env: NODE=4
  - node_js: "6"
    env: DEVELOPMENT=TRUE
  - node_js: "6"
    env: EXAMPLES=TRUE

cache:
  apt: true
  directories:
  - node_modules

before_install:
- npm prune
- if [ ${TRAVIS_REPO_SLUG}-${TRAVIS_PULL_REQUEST} = camptocamp/ngeo-false ]; then openssl aes-256-cbc -K $encrypted_66d875d20fac_key -iv $encrypted_66d875d20fac_iv -in secrets.tar.enc -out secrets.tar -d; fi
- if [ ${TRAVIS_REPO_SLUG}-${TRAVIS_PULL_REQUEST} = camptocamp/ngeo-false ]; then tar xvf secrets.tar; fi
- if [ ${TRAVIS_REPO_SLUG}-${TRAVIS_PULL_REQUEST} = camptocamp/ngeo-false ]; then cp .transifexrc $HOME/.transifexrc; fi
- if [ ${TRAVIS_REPO_SLUG}-${TRAVIS_PULL_REQUEST} = camptocamp/ngeo-false ]; then cp ngeo_deploy_key $HOME/.ssh/id_rsa; fi
- if [ ${TRAVIS_REPO_SLUG}-${TRAVIS_PULL_REQUEST} = camptocamp/ngeo-false ]; then chmod 600 $HOME/.ssh/id_rsa; fi
- git config --global user.name "Travis"
- git config --global user.email "travis@travis-ci.org"

script:
- if [ ${TRAVIS_PULL_REQUEST} != "false" ]; then git fetch origin ${TRAVIS_BRANCH}:${TRAVIS_BRANCH}; fi
- if [ ${TRAVIS_PULL_REQUEST} != "false" ]; then git diff --check ${TRAVIS_BRANCH} --; fi
- if [ "`git grep @fileoverview src contribs`" != "" ]; then echo "Using @fileoverview breaks the documentation main page"; false; fi
- if [ "`git grep @example src contribs`" != "" ]; then echo "We don't use @example to have the example in the description"; false; fi
- make git-attributes
- if [ "${EXAMPLES}" != TRUE ]; then make lint; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/apps/mobile.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/apps/desktop.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/apps/desktop_alt.check.timestamp; fi

# examples one by one to do not stop on first failure
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/animation.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/asitvd.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/attributes.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/backgroundlayerdropdown.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/backgroundlayer.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/bboxquery.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/colorpicker.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/control.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/createfeature.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/datepicker.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/desktopgeolocation.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/disclaimer.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/drawfeature.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/geolocation.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/grid.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/importfeatures.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/interactionbtngroup.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/interactiontoggle.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/layerloading.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/layeropacity.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/layerorder.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/layertree.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/layervisibility.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/locationchooser.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/mapfishprint.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/mapquery.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/measure.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/mobilegeolocation.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/modal.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/modifycircle.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/modifyrectangle.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/notification.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/permalink.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/popover.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/popupservice.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/profile.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/rotate.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/scaleselector.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/search.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/simple.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/toolActivate.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/authentication.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/backgroundlayerselector.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/contextualdata.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/displayquerygrid.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/displayquerywindow.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/editfeature.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/editfeatureselector.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/elevation.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/featurestyle.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/datepicker.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/drawfeature.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/layertree.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/permalink.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/profile.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/search.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/simple.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/layertreeadd.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/mobilemeasure.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/mouseposition.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/objectediting.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/objecteditinghub.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/print.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/share.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/themeselector.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/timeslider.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/wfspermalink.check.timestamp; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/contribs/gmf/xsdattributes.check.timestamp; fi

- if [ "${DEVELOPMENT}" = TRUE ]; then make dist/ngeo.js; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make dist/ngeo-debug.js; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make dist/gmf.js; fi

- if [ "${DEVELOPMENT}" = TRUE ]; then make test; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/examples-hosted/index.html; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make .build/examples-hosted/contribs/gmf/index.html; fi
- if [ "${DEVELOPMENT}" = TRUE ]; then make apidoc; fi

- if [ "${NODE}" = 4 ]; then make test; fi
- if [ "${EXAMPLES}-${TRAVIS_PULL_REQUEST}" = TRUE-false ]; then make examples-hosted; fi

after_success:
- cat .build/coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls.js

before_deploy:
- export GIT_BRANCH=${TRAVIS_BRANCH}
- .build/python-venv/bin/pip install jsongrep
- echo "_auth = ${NPM_AUTH}" > ~/.npmrc
- echo "email = stephane.brunner@camptocamp.com" >> ~/.npmrc

deploy:
- provider: script
  script: make gh-pages
  skip_cleanup: true
  on:
    repo: camptocamp/ngeo
    all_branches: true
    condition: '"${EXAMPLES}-${TRAVIS_PULL_REQUEST}" = TRUE-false'
- provider: script
  script: npm publish
  skip_cleanup: true
  on:
    node: "4"
    repo: camptocamp/ngeo
    tags: true
    condition: '"`.build/python-venv/bin/jsongrep -e version package.json`" == "${TRAVIS_TAG}"'
- &transifex
  provider: script
  script: make transifex-send
  skip_cleanup: true
  on:
    repo: camptocamp/ngeo
    branch: master
    node: "4"
- <<: *transifex
  on:
    repo: camptocamp/ngeo
    branch: 2.0
    node: "4"
